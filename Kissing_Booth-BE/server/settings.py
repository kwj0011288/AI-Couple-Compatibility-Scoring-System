"""
Django settings for server project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import pymysql
import os
pymysql.install_as_MySQLdb()
from decouple import config

import logging

# 구이콘 로그 파일에 에러 메세지 출력을 위한 설정
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {  # 표준 출력을 처리하는 핸들러
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',  # 루트 로거의 기본 레벨
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',  # Django 관련 로그의 기본 레벨
            'propagate': True,
        },
        '__main__': {
            'handlers': ['console'],
            'level': 'DEBUG',  # 애플리케이션의 주요 로거에 대해 DEBUG 사용
            'propagate': False,
        },
    },
}




# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
# ec2 배포 
ALLOWED_HOSTS = ['3.217.179.91', 'kissing-booth-ai.com', 'api.kissing-booth-ai.com']


# Application definition

INSTALLED_APPS = [
    # basic Django app
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    # project app
    "matches",
    
    # outside library app
    "rest_framework",  # Django REST Framework
    "storages",        # AWS S3 연동
    "corsheaders",     # CORS 설정 (Flutter와 통신)


]



MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",  # CORS 미들웨어 추가

]

# CORS 설정
# 특정 출처만 허용
CORS_ALLOWED_ORIGINS = [
    "https://kissing-booth-ai.com",
    "http://kissing-booth-ai.com",
    "https://api.kissing-booth-ai.com",
    "http://api.kissing-booth-ai.com",
    "http://3.217.179.91",  # 탄력적 IP 주소 추가
    "https://3.217.179.91",  # 탄력적 IP 주소 추가
    "http://localhost:3000",  # 원재 frontend URL
]

#https
USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECURE_SSL_REDIRECT = True


# REST Framework 기본 설정
REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",  # JSON 응답
    ],
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",  # JSON 요청 파싱
        "rest_framework.parsers.MultiPartParser",  # 멀티파트 요청 처리
    ],
}


ROOT_URLCONF = "server.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        # "DIRS": [BASE_DIR/'templates'],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "server.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql", # engine: mysql
        "NAME": "kissing_booth", # DB name
        "USER": config("DB_USER"),   # DB user
        "PASSWORD": config("DB_PASSWORD"),  # password
        "HOST": config("DB_HOST"), # DB endpoint
        "PORT": "3306", # database port
        "OPTIONS": {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        },
    } 
}




# AWS S3 
AWS_REGION = 'us-east-1'
AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME')
AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY')
AWS_S3_CUSTOM_DOMAIN = '%s.s3.%s.amazonaws.com' % (AWS_STORAGE_BUCKET_NAME, AWS_REGION)

# Static Setting
STATIC_URL = "https://%s/static/" % AWS_S3_CUSTOM_DOMAIN

STORAGES = {
    "default": {
        "BACKEND": "server.storages.MediaStorage",
    },
    "staticfiles": {
        "BACKEND": "server.storages.StaticStorage",
    },
}

# STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage' 
# DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'


# Static root for local usage (optional)
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Static root is still needed for local development
# STATIC_ROOT = BASE_DIR / "staticfiles"



# Media Setting
MEDIA_URL = "https://%s/meida/" % AWS_S3_CUSTOM_DOMAIN

AWS_QUERYSTRING_AUTH = False

AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"




# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# STATIC_URL = "static/"



